@use 'variables' as v;

// Flexbox
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-col {
  display: flex;
  flex-direction: column;
}

// Container
@mixin container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 v.$spacing-4;
}

// Typography
@mixin text($size: v.$font-size-base, $weight: normal, $color: v.$text-primary) {
  font-size: $size;
  font-weight: $weight;
  color: $color;
}

// Buttons
@mixin button-base {
  display: inline-block;
  padding: v.$spacing-2 v.$spacing-4;
  border: none;
  border-radius: v.$border-radius-md;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  text-decoration: none;
  text-align: center;
}

// Form inputs
@mixin input {
  width: 100%;
  padding: v.$spacing-2;
  border: 1px solid v.$border;
  border-radius: v.$border-radius-sm;
  font-size: v.$font-size-base;

  &:focus {
    outline: none;
    border-color: v.$primary;
    box-shadow: 0 0 0 3px rgba(v.$primary, 0.1);
  }
}

// Cards
@mixin card {
  background-color: white;
  border: 1px solid v.$border;
  border-radius: v.$border-radius-md;
  padding: v.$spacing-4;
  box-shadow: v.$shadow;
}

// Hover effects
@mixin hover-lift {
  transition: transform 0.2s;

  &:hover {
    transform: translateY(-2px);
  }
}

// Focus ring
@mixin focus-ring {
  outline: none;
  box-shadow: 0 0 0 3px rgba(v.$primary, 0.1);
}

// Aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  padding-bottom: percentage($height / $width);

  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// Truncate text
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Media queries
@mixin media-up($breakpoint) {
  @if $breakpoint == sm {
    @media (min-width: v.$breakpoint-sm) { @content; }
  } @else if $breakpoint == md {
    @media (min-width: v.$breakpoint-md) { @content; }
  } @else if $breakpoint == lg {
    @media (min-width: v.$breakpoint-lg) { @content; }
  } @else if $breakpoint == xl {
    @media (min-width: v.$breakpoint-xl) { @content; }
  }
} 